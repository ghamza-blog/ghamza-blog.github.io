<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ghamza Blog</title><link>https://blog.ghamza.dev/</link><description>Recent content on Ghamza Blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>¬© Hamza Jadid</copyright><lastBuildDate>Sat, 27 May 2023 01:00:00 +0300</lastBuildDate><atom:link href="https://blog.ghamza.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>How Rust Approached Error Handling</title><link>https://blog.ghamza.dev/posts/rust-error-handling-approach/</link><pubDate>Sat, 27 May 2023 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/rust-error-handling-approach/</guid><description>Introduction In the world of programming, errors are inevitable. Whether it&amp;rsquo;s a user inputting invalid data or a system failure due to an unexpected event, errors happen. However, not all programming languages handle errors in the same way. Rust, for example, takes a unique approach to error handling that differs greatly from the exception-based approach of many other languages.
Rust&amp;rsquo;s Approach to Error Handling Unlike many other programming languages, Rust does not rely on exceptions to handle errors.</description></item><item><title>The Evolution of Data Storage</title><link>https://blog.ghamza.dev/posts/evolution-of-data-storage/</link><pubDate>Sun, 21 May 2023 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/evolution-of-data-storage/</guid><description>Introduction The way we store data has undergone a remarkable transformation over the years. From the days of carving on stone tablets to the current era of storing data on advanced solid-state drives and cloud storage, the evolution of data storage has been nothing short of fascinating.
Writing on Stone and Paper The earliest known form of data storage was carving on stone tablets. This method was used by ancient civilizations to record important events, religious practices, and even legal proceedings.</description></item><item><title>Serialization</title><link>https://blog.ghamza.dev/posts/serialization/</link><pubDate>Sat, 13 May 2023 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/serialization/</guid><description>Introduction Serialization is the process of converting an object into a stream of bytes, which can then be stored on a disk or transmitted over a network. Deserialization, on the other hand, is the opposite process of converting a stream of bytes back into an object. While these terms may seem technical or even alien to some, they can actually be compared to something that we can all relate to ‚Äì buying and selling goods.</description></item><item><title>Building a CLI tool in Rust</title><link>https://blog.ghamza.dev/posts/rust-cli/</link><pubDate>Fri, 07 Apr 2023 04:20:15 +0200</pubDate><guid>https://blog.ghamza.dev/posts/rust-cli/</guid><description>Today we&amp;rsquo;re going learn how to write a CLI tool in rust through creating a dummy implementation of Github&amp;rsquo;s CLI tool.
We&amp;rsquo;re calling it dugh (dummy Github ü§ì).
Defining the functionality Before we start writing code, we should define the functionality of our tool.
We will start with managing pull requests command and making the tool extensible for other commands.
An example command would be:
cargo dugh pr create -t &amp;#34;title&amp;#34; -d Project setup Create a new bin rust project.</description></item><item><title>Rust .env</title><link>https://blog.ghamza.dev/posts/rust-dotenv/</link><pubDate>Wed, 11 Jan 2023 03:09:15 +0200</pubDate><guid>https://blog.ghamza.dev/posts/rust-dotenv/</guid><description>Environment Variables Good practice in software development is parametrizing our environment; for example, if we&amp;rsquo;re accessing a database and want to store the URL, username, and password, we should parametrize them so we can deploy staging and production environments without changing code.
Enviroment Varaibles in Rust We can access the environment variables from std::env::var.
use std::env; fn main() { let db_url = env::var(&amp;#34;DB_URL&amp;#34;).unwrap(); let db_user = env::var(&amp;#34;DB_USER&amp;#34;).unwrap(); let db_pass = env::var(&amp;#34;DB_PASS&amp;#34;).</description></item><item><title>Data Structures</title><link>https://blog.ghamza.dev/posts/data-structures/</link><pubDate>Sun, 16 Jan 2022 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/data-structures/</guid><description>It&amp;rsquo;s hard to represent information in plain text only and expect people to understand the meaning behind them. So people used different methods to ease the knowledge transfer.
Let us look at different types of representing data and how it could affect usage of it. We will learn Morse code in this article!
Morse code is a communication method invented by Samuel Morse. It&amp;rsquo;s based on short and long signals. If you want to communicate with someone using light, you can turn on the light for 1 second and turn it off to show him it&amp;rsquo;s a short signal and 3 seconds for long signals.</description></item><item><title>Number Bases</title><link>https://blog.ghamza.dev/posts/number-bases/</link><pubDate>Mon, 03 Jan 2022 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/number-bases/</guid><description>Old number systems Most historians believe that numbers were originally invented to count things, such as people, possessions, and transactions in commerce. For example, if someone owned three apples, it was written as drawings of three apples üçéüçéüçé
The person whose job it was to draw the apples and other things thought, &amp;ldquo;Why do I have to draw the same thing multiple times? Why can&amp;rsquo;t I draw it once and indicate that there are several of them with, I don&amp;rsquo;t know, a scratch mark or something?</description></item><item><title>Computer Memory</title><link>https://blog.ghamza.dev/posts/computer-memory/</link><pubDate>Sun, 12 Sep 2021 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/computer-memory/</guid><description>Usually in computers data are stored in 3 different types of memories, nonvolatile memory (or NVM for short), volatile memory, and processor memory. Think of the application&amp;rsquo;s data as a book, in fact, data in memory are distributed in a page-like model.
NVM has the capacity of storing a large amount of data, so we see computers or external storage have capacities of 500 GB, 1 TB, 2 TB, and even more.</description></item><item><title>Computer Compression</title><link>https://blog.ghamza.dev/posts/computer-compression/</link><pubDate>Wed, 04 Aug 2021 01:00:00 +0300</pubDate><guid>https://blog.ghamza.dev/posts/computer-compression/</guid><description>Compression isn&amp;rsquo;t something new, people used to compress things even before computers, folding-papers for example, so if you have a piece of paper containing some information or data, you can&amp;rsquo;t keep it in its flat state, so to make it mobile you have to fold it, to reduce its size so that it can be carried easily.
However, compression has its disadvantages as well, when something is compressed it becomes &amp;ldquo;unreadable&amp;rdquo;, so if you fold a paper it&amp;rsquo;s no longer readable.</description></item></channel></rss>