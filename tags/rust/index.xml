<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rust on Ghamza Blog</title><link>https://blog.ghamza.dev/tags/rust/</link><description>Recent content in Rust on Ghamza Blog</description><generator>Hugo -- gohugo.io</generator><copyright>Â© Hamza Jadid</copyright><lastBuildDate>Wed, 11 Jan 2023 05:20:15 +0200</lastBuildDate><atom:link href="https://blog.ghamza.dev/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust for Mobile Development Part 2: iOS Glue</title><link>https://blog.ghamza.dev/posts/rust-for-mobile-part-2-ios-glue/</link><pubDate>Wed, 11 Jan 2023 05:20:15 +0200</pubDate><guid>https://blog.ghamza.dev/posts/rust-for-mobile-part-2-ios-glue/</guid><description>Library Target Dependencies iOS Glue Setup Build File Errors Prelude FFI Helpers Glue Building the Project Using the Library Adding XCFramework Using XCFramework Most of our work is going to be on glue/ios
Library Target Inside glue/ios/Cargo.toml add the library target and make the crate type a static library
[package] name = &amp;quot;ios&amp;quot; version = &amp;quot;0.1.0&amp;quot; edition = &amp;quot;2021&amp;quot; [lib] name = &amp;quot;exa&amp;quot; crate-type = [&amp;quot;staticlib&amp;quot;] Dependencies exa_core; our core library libc; provides all of the definitions necessary to easily interoperate with C code (or &amp;ldquo;C-like&amp;rdquo; code) on each of the platforms that Rust supports cbindgen as build dependency; to generate our library header file.</description></item><item><title>Rust for Mobile Development Part 1: Setup</title><link>https://blog.ghamza.dev/posts/rust-for-mobile-part-1-setup/</link><pubDate>Wed, 11 Jan 2023 04:20:15 +0200</pubDate><guid>https://blog.ghamza.dev/posts/rust-for-mobile-part-1-setup/</guid><description>Creating the project Creating Rust Libraries Makefile Install Android and iOS Targets Add Minimal Code Inside Core In this series, we&amp;rsquo;ll see how rust works on android and ios by creating an Example library (libexa). We will start with setting up the project.
To build for android and iOS, you should be on macOS. If you&amp;rsquo;re using windows or linux, you can only build for android, but worth noting that some commands and setups might be different (for example, you might not have make, python, or brew on your machine).</description></item><item><title>Rust .env</title><link>https://blog.ghamza.dev/posts/rust-dotenv/</link><pubDate>Wed, 11 Jan 2023 03:09:15 +0200</pubDate><guid>https://blog.ghamza.dev/posts/rust-dotenv/</guid><description>Environment Variables Good practice in software development is parametrizing our environment; for example, if we&amp;rsquo;re accessing a database and want to store the URL, username, and password, we should parametrize them so we can deploy staging and production environments without changing code.
Enviroment Varaibles in Rust We can access the environment variables from std::env::var.
use std::env; fn main() { let db_url = env::var(&amp;quot;DB_URL&amp;quot;).unwrap(); let db_user = env::var(&amp;quot;DB_USER&amp;quot;).unwrap(); let db_pass = env::var(&amp;quot;DB_PASS&amp;quot;).</description></item></channel></rss>